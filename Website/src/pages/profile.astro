---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import BaseHead from '../components/BaseHead.astro';
import "../styles/profile.css";
---

<html lang="en">
<BaseHead/>
<body>
  <Header/>
  <main class="profile-main">
    <div id="output-container">
      <div id="elements">Loading...</div>
    </div>
  </main>
  <Footer/>

  <script type="module">
    import { collection, getDocs, query, where, doc, setDoc } from "../../node_modules/firebase/firestore";
    import { onAuthStateChanged } from "../../node_modules/firebase/auth";
    import { db, auth } from '../src/firebaseConfig.js';

    console.log("Initializing Firebase...");

    let isEditing = false;

    async function fetchUserData(userEmail) {
      console.log("Fetching user data for email:", userEmail);
      const output = document.getElementById("elements");

      if (!userEmail) {
        output.innerHTML = "No user email found.";
        console.error("No user email found.");
        return;
      }

      try {
        const userQuery = query(collection(db, "users"), where("email", "==", userEmail));
        const querySnapshot = await getDocs(userQuery);

        if (!querySnapshot.empty) {
          const userDoc = querySnapshot.docs[0];
          const userData = userDoc.data();
          console.log("User data fetched:", userData);
          displayUserData(userData);
        } else {
          output.innerHTML = "User not found.";
          console.error("User not found.");
        }
      } catch (error) {
        output.innerHTML = "Error fetching user data.";
        console.error("Error fetching user data:", error);
      }
    }

    function displayUserData(userData) {
      console.log("Displaying user data:", userData);
      const htmlCode = `
        <div class="profile-container">
          <h2>${userData.username || "No Name"}</h2>
          <p>Email: ${userData.email}</p>
          <p>Username: <span id="display-username">${userData.username || "No Username"}</span></p>
          <p>Bio: <span id="display-bio">${userData.bio || "No Bio"}</span></p>
          <img src="${userData.profilePic || 'default.jpg'}" alt="Profile Picture" class="profile-pic" id="display-profile-pic">
          <form id="profileForm" style="display: none;">
            <label for="username">Username</label>
            <input type="text" id="username" value="${userData.username || ''}">
            <label for="bio">Bio</label>
            <textarea id="bio">${userData.bio || ''}</textarea>
            <label for="profilePicture">Profile Picture URL</label>
            <input type="text" id="profilePicture" value="${userData.profilePic || ''}">
            <button type="submit">Update Profile</button>
          </form>
          <button id="edit-button">Edit Profile</button>
          <p id="profileSuccessMessage"></p>
          <p id="profileErrorMessage"></p>
        </div>
      `;

      const output = document.getElementById("elements");
      if (output) {
        output.innerHTML = htmlCode;
        console.log("User data displayed.");
        document.getElementById('profileForm').addEventListener('submit', updateUserData);
        document.getElementById('edit-button').addEventListener('click', toggleEdit);
      }
    }

    function toggleEdit() {
      isEditing = !isEditing;
      document.getElementById('profileForm').style.display = isEditing ? 'block' : 'none';
      document.getElementById('edit-button').textContent = isEditing ? 'Cancel' : 'Edit Profile';
      document.getElementById('display-username').style.display = isEditing ? 'none' : 'inline';
      document.getElementById('display-bio').style.display = isEditing ? 'none' : 'inline';
      document.getElementById('display-profile-pic').style.display = isEditing ? 'none' : 'block';
    }

    async function updateUserData(event) {
      event.preventDefault();
      console.log("Updating user data...");

      const username = document.getElementById('username').value;
      const bio = document.getElementById('bio').value;
      const profilePicture = document.getElementById('profilePicture').value;

      try {
        const user = auth.currentUser;
        if (user) {
          const userId = user.uid;
          await setDoc(doc(db, 'users', userId), {
            username,
            bio,
            profilePic: profilePicture
          }, { merge: true });

          document.getElementById('profileSuccessMessage').textContent = 'Profile updated successfully!';
          document.getElementById('profileErrorMessage').textContent = '';
          console.log("Profile updated successfully.");

          // Update displayed data
          document.getElementById('display-username').textContent = username;
          document.getElementById('display-bio').textContent = bio;
          document.getElementById('display-profile-pic').src = profilePicture;

          // Exit edit mode
          toggleEdit();
        } else {
          throw new Error('No user is signed in');
        }
      } catch (error) {
        document.getElementById('profileErrorMessage').textContent = `Error updating profile: ${error.message}`;
        document.getElementById('profileSuccessMessage').textContent = '';
        console.error("Error updating profile:", error);
      }
    }

    window.addEventListener('DOMContentLoaded', () => {
      console.log("Page loaded. Checking auth state...");
      onAuthStateChanged(auth, (user) => {
        if (user) {
          const userEmail = user.email;
          console.log("User is signed in:", user);
          fetchUserData(userEmail);
        } else {
          const output = document.getElementById("elements");
          output.innerHTML = "No user is signed in.";
          console.error("No user is signed in.");
        }
      });
    });
  </script>

</body>
</html>