---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import BaseHead from '../components/BaseHead.astro';
import "../styles/results.css"
import { testLab } from 'firebase-functions';
---


<html lang="en">
<BaseHead/>
<body>

<!-- Theres gotta be a better way of this... -->
  <script>
    import type { OrderByDirection, WhereFilterOp } from "firebase-admin/firestore";
import { initializeApp } from "firebase/app";
    import { getFirestore, or, orderBy } from "firebase/firestore";
    import { collection, getDocs, limit, query, where, doc } from 'firebase/firestore';
    

    //Initialize db
    const firebaseConfig = {
    apiKey: import.meta.env.PUBLIC_FIREBASE_API_KEY,
    authDomain: import.meta.env.PUBLIC_FIREBASE_AUTH_DOMAIN,
    projectId: import.meta.env.PUBLIC_FIREBASE_PROJECT_ID,
    storageBucket: import.meta.env.PUBLIC_FIREBASE_STORAGE_BUCKET,
    messagingSenderId: import.meta.env.PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
    appId: import.meta.env.PUBLIC_FIREBASE_APP_ID,
    measurementId: import.meta.env.PUBLIC_FIREBASE_MEASUREMENT_ID
    };

    const app = initializeApp(firebaseConfig);
    const db = getFirestore(app);


    let output = (document.getElementById("outputId") as HTMLInputElement);

    //Gather the parameters from the url
    const params = new URLSearchParams(window.location.search.slice(1));
    let searchParam = params.get("searchParam")!;
    let searchItem = params.get("searchItem")!;
    let searchOperator = params.get("searchOperator")!;

    if(searchOperator == null || searchOperator === "") searchOperator = '==';
    
    //let searchOperator = (document.getElementById("searchOperator") as HTMLInputElement).value;
    
    const result : any[] = [];
    let constraints : any[] = [];


    //Create the correct query
    if(searchParam === "Ingredients" || searchParam === "Tags"){
      searchOperator = 'array-contains-any';
      let searchItems = searchItem.split(",").map(x => x.trim());
      constraints = [collection(db, 'recipes'),  where(searchParam, searchOperator as WhereFilterOp, searchItems), limit(20)];
    }
    else if(searchParam === "Title" || searchParam === "Author"){
      if(searchOperator != '!=') searchOperator = '==';
      constraints = [collection(db, 'recipes'), where(searchParam, searchOperator as WhereFilterOp, searchItem), limit(20)];//TODO: implement orderBys
    }
    else{//For all the range possible options: servings and times
      constraints = [collection(db, 'recipes'),  where(searchParam, searchOperator as WhereFilterOp, searchItem), limit(20)];//TODO: I would like to add >= and <= options
    }

    output.value =  "Loading...";

      //Try to pull the query from the db
      try {
        const q = query.apply(this, constraints);
        const querySnapshot = await getDocs(q);

        const docSnapshots = querySnapshot.docs;
        for (var i in docSnapshots) {
        const doc = docSnapshots[i].data();
        
        result.push(doc);
        }

        
    } catch (error) {
        console.error("idk something happened");
    }

    const resultSize = result.length;
    output.value = "Result Size:" + resultSize.toString();//Display size
    

    let htmlCode = buildDisplayCode(result);

    document.getElementById("elements")!.innerHTML = htmlCode;


    function buildDisplayCode(json) {
      var htmlCode = "<h1>Search: " + searchParam + " " + searchOperator + " " + searchItem + "</h1>";

      if(json.length <= 0) return "<p>No recipes found.</p>";

      for(var recipe in json){
        htmlCode += "<article class=\"recipe-card\">";
          htmlCode += "<img src=" + json[recipe].Image + " alt=" + json[recipe].Title + " class=\"recipe-image\" />";
          htmlCode += "<div class=\"recipe-content\">";
            htmlCode += "<h2><a href=/recipes/" + json[recipe].Slug + ">" + json[recipe].Title + "</a></h2>";
            htmlCode += "<p>Chef " + json[recipe].Author + "</p>";
            htmlCode += "<p>" + json[recipe].Subtitle + "</p>";
          htmlCode += "</div>";
        htmlCode += "</article>";
      }

      return htmlCode;
    }

  </script>

  <Header/>
  <main class="results-main">

    <div id="ouput-container">
      <input id="outputId" value="" readonly>
    </div>

    <section class="recipes-section">
      <p id="elements"> </p>
    </section>



    
    


  </main>
  <Footer/>
  <!-- <script src="../scripts/search.js"></script> -->
</body>
</html>